/* Generated by Cython 0.29.25 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_25"
#define CYTHON_HEX_VERSION 0x001D19F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE___p2pExtension
#define __PYX_HAVE_API___p2pExtension
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#include "include/networkUtility.h"
#include "include/tmxParser.h"
#include "include/transitMatrix.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "spatial_access/src/_p2pExtension.pyx",
};

/* "_p2pExtension.pyx":15
 * from libcpp.unordered_set cimport unordered_set
 * 
 * ctypedef unsigned short int ushort             # <<<<<<<<<<<<<<
 * ctypedef unsigned long int ulong
 * ctypedef unsigned int uint
 */
typedef unsigned short __pyx_t_13_p2pExtension_ushort;

/* "_p2pExtension.pyx":16
 * 
 * ctypedef unsigned short int ushort
 * ctypedef unsigned long int ulong             # <<<<<<<<<<<<<<
 * ctypedef unsigned int uint
 * 
 */
typedef unsigned long __pyx_t_13_p2pExtension_ulong;

/* "_p2pExtension.pyx":17
 * ctypedef unsigned short int ushort
 * ctypedef unsigned long int ulong
 * ctypedef unsigned int uint             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/networkUtility.h":
 */
typedef unsigned int __pyx_t_13_p2pExtension_uint;

/*--- Type declarations ---*/
struct __pyx_obj_13_p2pExtension_pyNetworkUtility;
struct __pyx_obj_13_p2pExtension_pyTMXTypeReader;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS;
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI;

/* "_p2pExtension.pyx":31
 * 
 * 
 * cdef class pyNetworkUtility:             # <<<<<<<<<<<<<<
 *     cdef NetworkUtility *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyNetworkUtility {
  PyObject_HEAD
  NetworkUtility<unsigned long int> *thisptr;
};


/* "_p2pExtension.pyx":43
 *         return self.thisptr.getConnectedNetworkNodes()
 * 
 * cdef class pyTMXTypeReader:             # <<<<<<<<<<<<<<
 *     cdef tmxTypeReader *thisptr
 *     cdef int tmxVersion
 */
struct __pyx_obj_13_p2pExtension_pyTMXTypeReader {
  PyObject_HEAD
  tmxTypeReader *thisptr;
  int tmxVersion;
  int rowTypeEnum;
  int colTypeEnum;
  int valueTypeEnum;
};


/* "_p2pExtension.pyx":111
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixIxIxUS:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixIxIxUS *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS {
  PyObject_HEAD
  transitMatrix<unsigned long int, unsigned long int,unsigned short int> *thisptr;
};


/* "_p2pExtension.pyx":227
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixIxIxUI:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixIxIxUI *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI {
  PyObject_HEAD
  transitMatrix<unsigned long int, unsigned long int,unsigned int> *thisptr;
};


/* "_p2pExtension.pyx":343
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixIxSxUS:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixIxSxUS *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS {
  PyObject_HEAD
  transitMatrix<unsigned long int, string,unsigned short int> *thisptr;
};


/* "_p2pExtension.pyx":459
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixIxSxUI:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixIxSxUI *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI {
  PyObject_HEAD
  transitMatrix<unsigned long int, string,unsigned int> *thisptr;
};


/* "_p2pExtension.pyx":575
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixSxIxUS:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixSxIxUS *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS {
  PyObject_HEAD
  transitMatrix<string, unsigned long int,unsigned short int> *thisptr;
};


/* "_p2pExtension.pyx":691
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixSxIxUI:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixSxIxUI *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI {
  PyObject_HEAD
  transitMatrix<string, unsigned long int,unsigned int> *thisptr;
};


/* "_p2pExtension.pyx":807
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixSxSxUS:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixSxSxUS *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS {
  PyObject_HEAD
  transitMatrix<string, string,unsigned short int> *thisptr;
};


/* "_p2pExtension.pyx":923
 *         void printDataFrame() except +
 * 
 * cdef class  pyTransitMatrixSxSxUI:             # <<<<<<<<<<<<<<
 *     cdef transitMatrixSxSxUI *thisptr
 * 
 */
struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI {
  PyObject_HEAD
  transitMatrix<string, string,unsigned int> *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'libcpp.unordered_set' */

/* Module declarations from '_p2pExtension' */
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyNetworkUtility = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTMXTypeReader = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixIxIxUS = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixIxIxUI = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixIxSxUS = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixIxSxUI = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixSxIxUS = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixSxIxUI = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixSxSxUS = 0;
static PyTypeObject *__pyx_ptype_13_p2pExtension_pyTransitMatrixSxSxUI = 0;
static std::pair<unsigned long,unsigned long>  __pyx_convert_pair_from_py_unsigned_long__and_unsigned_long(PyObject *); /*proto*/
static std::vector<std::pair<unsigned long,unsigned long> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___(PyObject *); /*proto*/
static std::vector<unsigned long>  __pyx_convert_vector_from_py_unsigned_long(PyObject *); /*proto*/
static PyObject *__pyx_convert_unordered_set_to_py_unsigned_long(std::unordered_set<unsigned long>  const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<unsigned short>  __pyx_convert_vector_from_py_unsigned_short(PyObject *); /*proto*/
static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *); /*proto*/
static std::vector<std::vector<unsigned short> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_unsigned_long____unsigned_short(std::pair<unsigned long,unsigned short>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(const std::vector<std::pair<unsigned long,unsigned short> >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_unsigned_long(const std::vector<unsigned long>  &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(std::unordered_map<unsigned long,std::vector<unsigned long> >  const &); /*proto*/
static std::vector<unsigned int>  __pyx_convert_vector_from_py_unsigned_int(PyObject *); /*proto*/
static std::vector<std::vector<unsigned int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(PyObject *); /*proto*/
static PyObject *__pyx_convert_pair_to_py_unsigned_long____unsigned_int(std::pair<unsigned long,unsigned int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(const std::vector<std::pair<unsigned long,unsigned int> >  &); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short(std::pair<std::string,unsigned short>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(const std::vector<std::pair<std::string,unsigned short> >  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(std::unordered_map<std::string,std::vector<unsigned long> >  const &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<unsigned long,std::vector<std::string> >  const &); /*proto*/
static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int(std::pair<std::string,unsigned int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(const std::vector<std::pair<std::string,unsigned int> >  &); /*proto*/
static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<std::string,std::vector<std::string> >  const &); /*proto*/
#define __Pyx_MODULE_NAME "_p2pExtension"
extern int __pyx_module_is_main__p2pExtension;
int __pyx_module_is_main__p2pExtension = 0;

/* Implementation of '_p2pExtension' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_id[] = "id_";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_rows[] = "rows";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_edges[] = "edges";
static const char __pyx_k_nodes[] = "nodes";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_col_ids[] = "col_ids";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_dataset[] = "dataset";
static const char __pyx_k_dest_id[] = "dest_id";
static const char __pyx_k_row_ids[] = "row_ids";
static const char __pyx_k_category[] = "category";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_source_id[] = "source_id";
static const char __pyx_k_to_column[] = "to_column";
static const char __pyx_k_from_column[] = "from_column";
static const char __pyx_k_isSymmetric[] = "isSymmetric";
static const char __pyx_k_networkNodeId[] = "networkNodeId";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_isCompressible[] = "isCompressible";
static const char __pyx_k_pyTMXTypeReader[] = "pyTMXTypeReader";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_lastMileDistance[] = "lastMileDistance";
static const char __pyx_k_pyNetworkUtility[] = "pyNetworkUtility";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_edge_weight_column[] = "edge_weight_column";
static const char __pyx_k_pyTransitMatrixIxIxUI[] = "pyTransitMatrixIxIxUI";
static const char __pyx_k_pyTransitMatrixIxIxUS[] = "pyTransitMatrixIxIxUS";
static const char __pyx_k_pyTransitMatrixIxSxUI[] = "pyTransitMatrixIxSxUI";
static const char __pyx_k_pyTransitMatrixIxSxUS[] = "pyTransitMatrixIxSxUS";
static const char __pyx_k_pyTransitMatrixSxIxUI[] = "pyTransitMatrixSxIxUI";
static const char __pyx_k_pyTransitMatrixSxIxUS[] = "pyTransitMatrixSxIxUS";
static const char __pyx_k_pyTransitMatrixSxSxUI[] = "pyTransitMatrixSxSxUI";
static const char __pyx_k_pyTransitMatrixSxSxUS[] = "pyTransitMatrixSxSxUS";
static const char __pyx_k_is_bidirectional_column[] = "is_bidirectional_column";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_category;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_col_ids;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_dataset;
static PyObject *__pyx_n_s_dest_id;
static PyObject *__pyx_n_s_edge_weight_column;
static PyObject *__pyx_n_s_edges;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_from_column;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_isCompressible;
static PyObject *__pyx_n_s_isSymmetric;
static PyObject *__pyx_n_s_is_bidirectional_column;
static PyObject *__pyx_n_s_lastMileDistance;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_networkNodeId;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_nodes;
static PyObject *__pyx_n_s_pyNetworkUtility;
static PyObject *__pyx_n_s_pyTMXTypeReader;
static PyObject *__pyx_n_s_pyTransitMatrixIxIxUI;
static PyObject *__pyx_n_s_pyTransitMatrixIxIxUS;
static PyObject *__pyx_n_s_pyTransitMatrixIxSxUI;
static PyObject *__pyx_n_s_pyTransitMatrixIxSxUS;
static PyObject *__pyx_n_s_pyTransitMatrixSxIxUI;
static PyObject *__pyx_n_s_pyTransitMatrixSxIxUS;
static PyObject *__pyx_n_s_pyTransitMatrixSxSxUI;
static PyObject *__pyx_n_s_pyTransitMatrixSxSxUS;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_row_ids;
static PyObject *__pyx_n_s_rows;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_source_id;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_column;
static int __pyx_pf_13_p2pExtension_16pyNetworkUtility___cinit__(struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_nodes); /* proto */
static void __pyx_pf_13_p2pExtension_16pyNetworkUtility_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_16pyNetworkUtility_4getConnectedNetworkNodes(struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_16pyNetworkUtility_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_16pyNetworkUtility_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_15pyTMXTypeReader___cinit__(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static void __pyx_pf_13_p2pExtension_15pyTMXTypeReader_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_4get_tmx_version(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_6get_row_type_enum(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_8get_col_type_enum(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_10get_value_type_enum(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns); /* proto */
static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_vertices); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_numThreads); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_infile); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_range_); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_13_p2pExtension_pyNetworkUtility(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTMXTypeReader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxIxUS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxIxUI(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxSxUS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxSxUI(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxIxUS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxIxUI(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxSxUS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxSxUI(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
/* Late includes */

/* "_p2pExtension.pyx":34
 *     cdef NetworkUtility *thisptr
 * 
 *     def __cinit__(self, edges, nodes):             # <<<<<<<<<<<<<<
 *         self.thisptr = new NetworkUtility(edges, nodes)
 * 
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_16pyNetworkUtility_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_16pyNetworkUtility_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edges = 0;
  PyObject *__pyx_v_nodes = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edges,&__pyx_n_s_nodes,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edges)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nodes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, 1); __PYX_ERR(1, 34, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 34, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_edges = values[0];
    __pyx_v_nodes = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 34, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyNetworkUtility.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_16pyNetworkUtility___cinit__(((struct __pyx_obj_13_p2pExtension_pyNetworkUtility *)__pyx_v_self), __pyx_v_edges, __pyx_v_nodes);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_16pyNetworkUtility___cinit__(struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self, PyObject *__pyx_v_edges, PyObject *__pyx_v_nodes) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::vector<std::pair<unsigned long,unsigned long> >  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  NetworkUtility<unsigned long int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":35
 * 
 *     def __cinit__(self, edges, nodes):
 *         self.thisptr = new NetworkUtility(edges, nodes)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___(__pyx_v_edges); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 35, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_nodes); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 35, __pyx_L1_error)
  try {
    __pyx_t_3 = new NetworkUtility<unsigned long int>(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 35, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_3;

  /* "_p2pExtension.pyx":34
 *     cdef NetworkUtility *thisptr
 * 
 *     def __cinit__(self, edges, nodes):             # <<<<<<<<<<<<<<
 *         self.thisptr = new NetworkUtility(edges, nodes)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyNetworkUtility.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":37
 *         self.thisptr = new NetworkUtility(edges, nodes)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_16pyNetworkUtility_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_16pyNetworkUtility_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_16pyNetworkUtility_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyNetworkUtility *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_16pyNetworkUtility_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":38
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def getConnectedNetworkNodes(self):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":37
 *         self.thisptr = new NetworkUtility(edges, nodes)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":40
 *         del self.thisptr
 * 
 *     def getConnectedNetworkNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getConnectedNetworkNodes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_16pyNetworkUtility_5getConnectedNetworkNodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_16pyNetworkUtility_5getConnectedNetworkNodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConnectedNetworkNodes (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_16pyNetworkUtility_4getConnectedNetworkNodes(((struct __pyx_obj_13_p2pExtension_pyNetworkUtility *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_16pyNetworkUtility_4getConnectedNetworkNodes(struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unordered_set<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getConnectedNetworkNodes", 0);

  /* "_p2pExtension.pyx":41
 * 
 *     def getConnectedNetworkNodes(self):
 *         return self.thisptr.getConnectedNetworkNodes()             # <<<<<<<<<<<<<<
 * 
 * cdef class pyTMXTypeReader:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getConnectedNetworkNodes();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 41, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_unordered_set_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":40
 *         del self.thisptr
 * 
 *     def getConnectedNetworkNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getConnectedNetworkNodes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyNetworkUtility.getConnectedNetworkNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_16pyNetworkUtility_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_16pyNetworkUtility_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_16pyNetworkUtility_6__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyNetworkUtility *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_16pyNetworkUtility_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyNetworkUtility.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_16pyNetworkUtility_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_16pyNetworkUtility_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_16pyNetworkUtility_8__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyNetworkUtility *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_16pyNetworkUtility_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyNetworkUtility *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyNetworkUtility.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":50
 *     cdef int valueTypeEnum
 * 
 *     def __cinit__(self, filename):             # <<<<<<<<<<<<<<
 *         self.thisptr = new tmxTypeReader(filename)
 *         self.tmxVersion = self.thisptr.readUshort()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_15pyTMXTypeReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_15pyTMXTypeReader_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 50, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 50, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_15pyTMXTypeReader___cinit__(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_15pyTMXTypeReader___cinit__(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self, PyObject *__pyx_v_filename) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  tmxTypeReader *__pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":51
 * 
 *     def __cinit__(self, filename):
 *         self.thisptr = new tmxTypeReader(filename)             # <<<<<<<<<<<<<<
 *         self.tmxVersion = self.thisptr.readUshort()
 *         self.rowTypeEnum = self.thisptr.readUshort()
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_filename); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 51, __pyx_L1_error)
  try {
    __pyx_t_2 = new tmxTypeReader(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 51, __pyx_L1_error)
  }
  __pyx_v_self->thisptr = __pyx_t_2;

  /* "_p2pExtension.pyx":52
 *     def __cinit__(self, filename):
 *         self.thisptr = new tmxTypeReader(filename)
 *         self.tmxVersion = self.thisptr.readUshort()             # <<<<<<<<<<<<<<
 *         self.rowTypeEnum = self.thisptr.readUshort()
 *         self.colTypeEnum = self.thisptr.readUshort()
 */
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->readUshort();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 52, __pyx_L1_error)
  }
  __pyx_v_self->tmxVersion = __pyx_t_3;

  /* "_p2pExtension.pyx":53
 *         self.thisptr = new tmxTypeReader(filename)
 *         self.tmxVersion = self.thisptr.readUshort()
 *         self.rowTypeEnum = self.thisptr.readUshort()             # <<<<<<<<<<<<<<
 *         self.colTypeEnum = self.thisptr.readUshort()
 *         self.valueTypeEnum = self.thisptr.readUshort()
 */
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->readUshort();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 53, __pyx_L1_error)
  }
  __pyx_v_self->rowTypeEnum = __pyx_t_3;

  /* "_p2pExtension.pyx":54
 *         self.tmxVersion = self.thisptr.readUshort()
 *         self.rowTypeEnum = self.thisptr.readUshort()
 *         self.colTypeEnum = self.thisptr.readUshort()             # <<<<<<<<<<<<<<
 *         self.valueTypeEnum = self.thisptr.readUshort()
 * 
 */
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->readUshort();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 54, __pyx_L1_error)
  }
  __pyx_v_self->colTypeEnum = __pyx_t_3;

  /* "_p2pExtension.pyx":55
 *         self.rowTypeEnum = self.thisptr.readUshort()
 *         self.colTypeEnum = self.thisptr.readUshort()
 *         self.valueTypeEnum = self.thisptr.readUshort()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->readUshort();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 55, __pyx_L1_error)
  }
  __pyx_v_self->valueTypeEnum = __pyx_t_3;

  /* "_p2pExtension.pyx":50
 *     cdef int valueTypeEnum
 * 
 *     def __cinit__(self, filename):             # <<<<<<<<<<<<<<
 *         self.thisptr = new tmxTypeReader(filename)
 *         self.tmxVersion = self.thisptr.readUshort()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":57
 *         self.valueTypeEnum = self.thisptr.readUshort()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_15pyTMXTypeReader_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_15pyTMXTypeReader_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_15pyTMXTypeReader_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_15pyTMXTypeReader_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":58
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def get_tmx_version(self):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":57
 *         self.valueTypeEnum = self.thisptr.readUshort()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":60
 *         del self.thisptr
 * 
 *     def get_tmx_version(self):             # <<<<<<<<<<<<<<
 *         return self.tmxVersion
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_5get_tmx_version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_5get_tmx_version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tmx_version (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_15pyTMXTypeReader_4get_tmx_version(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_4get_tmx_version(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tmx_version", 0);

  /* "_p2pExtension.pyx":61
 * 
 *     def get_tmx_version(self):
 *         return self.tmxVersion             # <<<<<<<<<<<<<<
 * 
 *     def get_row_type_enum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->tmxVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":60
 *         del self.thisptr
 * 
 *     def get_tmx_version(self):             # <<<<<<<<<<<<<<
 *         return self.tmxVersion
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.get_tmx_version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":63
 *         return self.tmxVersion
 * 
 *     def get_row_type_enum(self):             # <<<<<<<<<<<<<<
 *         return self.rowTypeEnum
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_7get_row_type_enum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_7get_row_type_enum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_row_type_enum (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_15pyTMXTypeReader_6get_row_type_enum(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_6get_row_type_enum(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_row_type_enum", 0);

  /* "_p2pExtension.pyx":64
 * 
 *     def get_row_type_enum(self):
 *         return self.rowTypeEnum             # <<<<<<<<<<<<<<
 * 
 *     def get_col_type_enum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->rowTypeEnum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":63
 *         return self.tmxVersion
 * 
 *     def get_row_type_enum(self):             # <<<<<<<<<<<<<<
 *         return self.rowTypeEnum
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.get_row_type_enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":66
 *         return self.rowTypeEnum
 * 
 *     def get_col_type_enum(self):             # <<<<<<<<<<<<<<
 *         return self.colTypeEnum
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_9get_col_type_enum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_9get_col_type_enum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_col_type_enum (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_15pyTMXTypeReader_8get_col_type_enum(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_8get_col_type_enum(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_col_type_enum", 0);

  /* "_p2pExtension.pyx":67
 * 
 *     def get_col_type_enum(self):
 *         return self.colTypeEnum             # <<<<<<<<<<<<<<
 * 
 *     def get_value_type_enum(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->colTypeEnum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":66
 *         return self.rowTypeEnum
 * 
 *     def get_col_type_enum(self):             # <<<<<<<<<<<<<<
 *         return self.colTypeEnum
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.get_col_type_enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":69
 *         return self.colTypeEnum
 * 
 *     def get_value_type_enum(self):             # <<<<<<<<<<<<<<
 *         return self.valueTypeEnum
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_11get_value_type_enum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_11get_value_type_enum(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_value_type_enum (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_15pyTMXTypeReader_10get_value_type_enum(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_10get_value_type_enum(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_type_enum", 0);

  /* "_p2pExtension.pyx":70
 * 
 *     def get_value_type_enum(self):
 *         return self.valueTypeEnum             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->valueTypeEnum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":69
 *         return self.colTypeEnum
 * 
 *     def get_value_type_enum(self):             # <<<<<<<<<<<<<<
 *         return self.valueTypeEnum
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.get_value_type_enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_15pyTMXTypeReader_12__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_15pyTMXTypeReader_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_15pyTMXTypeReader_14__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_15pyTMXTypeReader_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTMXTypeReader *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTMXTypeReader.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":114
 *     cdef transitMatrixIxIxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxIxUS()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 114, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 114, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 114, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 114, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 114, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 114, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<unsigned long int, unsigned long int,unsigned short int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":115
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxIxUS()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":116
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxIxUS()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixIxIxUS(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, unsigned long int,unsigned short int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 116, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":115
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxIxUS()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":118
 *             self.thisptr = new transitMatrixIxIxUS()
 *         else:
 *             self.thisptr = new transitMatrixIxIxUS(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, unsigned long int,unsigned short int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 118, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":114
 *     cdef transitMatrixIxIxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxIxUS()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":120
 *             self.thisptr = new transitMatrixIxIxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":121
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":120
 *             self.thisptr = new transitMatrixIxIxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":123
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":124
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 124, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 124, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":123
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":127
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 127, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 127, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 127, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 127, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":128
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 128, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 128, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 128, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 128, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":127
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":130
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 130, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 130, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 130, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 130, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":131
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 131, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 131, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 131, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 131, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":130
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":133
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 133, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 133, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 133, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 133, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 133, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned short>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":134
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 134, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 134, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_short(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 134, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 134, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 134, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":133
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":136
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 136, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 136, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 136, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 136, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned short> >  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned long>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":137
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 137, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 137, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 137, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 137, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":136
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":139
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":140
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 140, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 140, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":139
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":142
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":143
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 143, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":142
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":145
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":146
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 146, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 146, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":145
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":148
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":149
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 149, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 149, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":148
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":151
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":152
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 152, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 152, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":151
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":154
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":155
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 155, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 155, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":154
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":157
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":158
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 158, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":157
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":160
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 160, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 160, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 160, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":161
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 161, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 161, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 161, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":160
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":163
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 163, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 163, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 163, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":164
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 164, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 164, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 164, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":163
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":166
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 166, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 166, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 166, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":167
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 167, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 167, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 167, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":166
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":169
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 169, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 169, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 169, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":170
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 170, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":169
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":172
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 172, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 172, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 172, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 172, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  __pyx_t_13_p2pExtension_ushort __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":173
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 173, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 173, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":172
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":175
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":176
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 176, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 176, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":175
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":178
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 178, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 178, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 178, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":179
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 179, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 179, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 179, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":178
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":181
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":182
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 182, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":181
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":184
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":185
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 185, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":184
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":187
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":188
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 188, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 188, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":187
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":190
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":191
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/transitMatrix.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 191, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 191, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":190
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":230
 *     cdef transitMatrixIxIxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxIxUI()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 230, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 230, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 230, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 230, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 230, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 230, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<unsigned long int, unsigned long int,unsigned int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":231
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxIxUI()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":232
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxIxUI()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixIxIxUI(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, unsigned long int,unsigned int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 232, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":231
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxIxUI()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":234
 *             self.thisptr = new transitMatrixIxIxUI()
 *         else:
 *             self.thisptr = new transitMatrixIxIxUI(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, unsigned long int,unsigned int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 234, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":230
 *     cdef transitMatrixIxIxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxIxUI()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":236
 *             self.thisptr = new transitMatrixIxIxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":237
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":236
 *             self.thisptr = new transitMatrixIxIxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":239
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":240
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 240, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 240, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":239
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":243
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 243, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 243, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 243, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 243, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":244
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 244, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 244, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 244, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 244, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":243
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":246
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 246, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 246, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 246, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 246, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":247
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 247, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 247, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":246
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":249
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 249, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 249, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 249, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 249, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 249, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned int>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":250
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 250, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 250, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 250, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 250, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 250, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":249
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":252
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 252, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned int> >  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned long>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":253
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 253, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 253, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 253, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 253, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":252
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":255
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":256
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 256, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 256, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":255
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":258
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":259
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 259, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":258
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":261
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":262
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 262, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 262, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":261
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":264
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":265
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 265, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":264
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":267
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":268
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 268, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 268, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":267
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":270
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":271
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 271, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 271, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":270
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":273
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":274
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 274, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":273
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":276
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 276, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 276, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 276, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":277
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 277, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 277, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 277, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":276
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":279
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 279, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 279, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 279, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":280
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 280, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 280, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 280, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":279
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":282
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 282, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":283
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 283, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 283, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 283, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":282
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":285
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 285, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 285, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 285, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":286
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 286, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 286, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 286, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":285
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":288
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 288, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 288, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 288, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 288, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  __pyx_t_13_p2pExtension_uint __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":289
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 289, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 289, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 289, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 289, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":288
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":291
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":292
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 292, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 292, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":291
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":294
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 294, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 294, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 294, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":295
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 295, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 295, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 295, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":294
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":297
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":298
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 298, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":297
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":300
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":301
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 301, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":300
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":303
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":304
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 304, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 304, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":303
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":306
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":307
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/transitMatrix.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 307, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 307, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":306
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxIxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxIxUI.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":346
 *     cdef transitMatrixIxSxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxSxUS()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 346, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<unsigned long int, string,unsigned short int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":347
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxSxUS()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":348
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxSxUS()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixIxSxUS(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, string,unsigned short int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 348, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":347
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxSxUS()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":350
 *             self.thisptr = new transitMatrixIxSxUS()
 *         else:
 *             self.thisptr = new transitMatrixIxSxUS(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, string,unsigned short int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 350, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":346
 *     cdef transitMatrixIxSxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxSxUS()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":352
 *             self.thisptr = new transitMatrixIxSxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":353
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":352
 *             self.thisptr = new transitMatrixIxSxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":355
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":356
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 356, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 356, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":355
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":359
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 359, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 359, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 359, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 359, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":360
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 360, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 360, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 360, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 360, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":359
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":362
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 362, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 362, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 362, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 362, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":363
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 363, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 363, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 363, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 363, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":362
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":365
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 365, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 365, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 365, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 365, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 365, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned short>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":366
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_short(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 366, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 366, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":365
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":368
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 368, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 368, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 368, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 368, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned short> >  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<std::string>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":369
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 369, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 369, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 369, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 369, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":368
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":371
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":372
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 372, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 372, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":371
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":374
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":375
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 375, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 375, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":374
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":377
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":378
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 378, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 378, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":377
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":380
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":381
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 381, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 381, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":380
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":383
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":384
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 384, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 384, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":383
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":386
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":387
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 387, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 387, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":386
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":389
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":390
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 390, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":389
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":392
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 392, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 392, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 392, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":393
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 393, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 393, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 393, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":392
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":395
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 395, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 395, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 395, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":396
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 396, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 396, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 396, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":395
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":398
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 398, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 398, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 398, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":399
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 399, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 399, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 399, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":398
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":401
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 401, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 401, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 401, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":402
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 402, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 402, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 402, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":401
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":404
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 404, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 404, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 404, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 404, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  __pyx_t_13_p2pExtension_ushort __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":405
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 405, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 405, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 405, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 405, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":404
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":407
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":408
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 408, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 408, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":407
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":410
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 410, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 410, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 410, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":411
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 411, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 411, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 411, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":410
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":413
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":414
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 414, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":413
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":416
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":417
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 417, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":416
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":419
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<std::string,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":420
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 420, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 420, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":419
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":422
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":423
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/transitMatrix.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 423, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 423, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":422
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":462
 *     cdef transitMatrixIxSxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxSxUI()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 462, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 462, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<unsigned long int, string,unsigned int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":463
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxSxUI()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":464
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxSxUI()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixIxSxUI(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, string,unsigned int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 464, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":463
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixIxSxUI()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":466
 *             self.thisptr = new transitMatrixIxSxUI()
 *         else:
 *             self.thisptr = new transitMatrixIxSxUI(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<unsigned long int, string,unsigned int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 466, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":462
 *     cdef transitMatrixIxSxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixIxSxUI()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":468
 *             self.thisptr = new transitMatrixIxSxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":469
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":468
 *             self.thisptr = new transitMatrixIxSxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":471
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":472
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 472, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 472, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":471
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":475
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 475, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 475, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 475, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 475, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":476
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 476, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 476, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 476, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 476, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":475
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":478
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 478, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 478, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 478, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 478, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":479
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 479, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 479, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 479, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 479, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":478
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":481
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 481, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 481, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 481, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned int>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":482
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 482, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 482, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 482, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":481
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":484
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 484, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 484, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 484, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 484, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned int> >  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<std::string>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":485
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 485, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 485, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 485, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 485, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":484
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":487
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":488
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 488, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 488, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":487
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":490
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":491
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 491, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 491, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":490
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":493
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":494
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 494, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 494, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":493
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":496
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":497
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 497, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 497, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":496
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":499
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":500
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 500, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 500, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":499
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":502
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":503
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 503, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 503, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":502
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":505
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":506
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 506, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":505
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":508
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 508, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 508, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 508, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":509
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 509, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 509, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 509, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":508
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":511
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 511, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 511, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 511, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":512
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 512, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 512, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 512, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":511
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":514
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 514, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 514, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 514, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":515
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 515, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 515, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 515, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":514
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":517
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 517, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 517, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 517, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":518
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 518, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 518, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 518, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":517
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":520
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 520, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 520, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 520, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 520, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  __pyx_t_13_p2pExtension_uint __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":521
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 521, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 521, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 521, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 521, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":520
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":523
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":524
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 524, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 524, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":523
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":526
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 526, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 526, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 526, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":527
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_source_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 527, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 527, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 527, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":526
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":529
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":530
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 530, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":529
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":532
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":533
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 533, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":532
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":535
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<std::string,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":536
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 536, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 536, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":535
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":538
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":539
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/transitMatrix.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 539, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 539, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":538
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixIxSxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixIxSxUI.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":578
 *     cdef transitMatrixSxIxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxIxUS()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 578, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 578, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 578, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 578, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 578, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 578, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<string, unsigned long int,unsigned short int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":579
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxIxUS()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":580
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxIxUS()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixSxIxUS(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<string, unsigned long int,unsigned short int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 580, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":579
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxIxUS()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":582
 *             self.thisptr = new transitMatrixSxIxUS()
 *         else:
 *             self.thisptr = new transitMatrixSxIxUS(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<string, unsigned long int,unsigned short int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 582, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":578
 *     cdef transitMatrixSxIxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxIxUS()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":584
 *             self.thisptr = new transitMatrixSxIxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":585
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":584
 *             self.thisptr = new transitMatrixSxIxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":587
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":588
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 588, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 588, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":587
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":591
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 591, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 591, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 591, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 591, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":592
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 592, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 592, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 592, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 592, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":591
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":594
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 594, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 594, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 594, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 594, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":595
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 595, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 595, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 595, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 595, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":594
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":597
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 597, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 597, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 597, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 597, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 597, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned short>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":598
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 598, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 598, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_short(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 598, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 598, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 598, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":597
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":600
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 600, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 600, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 600, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 600, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned short> >  __pyx_t_1;
  std::vector<std::string>  __pyx_t_2;
  std::vector<unsigned long>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":601
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 601, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 601, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 601, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 601, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":600
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":603
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":604
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 604, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 604, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":603
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":606
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":607
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 607, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 607, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":606
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":609
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":610
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 610, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 610, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":609
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":612
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":613
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 613, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 613, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":612
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":615
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":616
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 616, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 616, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":615
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":618
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":619
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 619, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 619, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":618
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":621
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":622
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 622, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":621
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":624
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 624, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 624, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 624, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":625
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 625, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 625, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 625, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":624
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":627
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 627, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 627, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":628
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 628, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 628, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":627
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":630
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 630, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 630, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 630, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":631
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 631, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 631, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 631, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":630
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":633
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 633, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 633, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 633, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":634
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 634, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 634, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 634, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":633
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":636
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 636, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 636, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 636, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 636, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  __pyx_t_13_p2pExtension_ushort __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":637
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 637, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 637, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":636
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":639
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":640
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 640, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 640, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":639
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":642
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 642, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 642, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 642, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":643
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 643, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 643, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 643, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":642
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":645
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":646
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 646, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":645
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":648
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":649
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 649, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":648
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":651
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":652
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 652, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 652, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":651
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":654
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<std::string,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":655
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/transitMatrix.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 655, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 655, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":654
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":694
 *     cdef transitMatrixSxIxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxIxUI()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 694, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 694, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<string, unsigned long int,unsigned int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":695
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxIxUI()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":696
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxIxUI()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixSxIxUI(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<string, unsigned long int,unsigned int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 696, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":695
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxIxUI()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":698
 *             self.thisptr = new transitMatrixSxIxUI()
 *         else:
 *             self.thisptr = new transitMatrixSxIxUI(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<string, unsigned long int,unsigned int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 698, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":694
 *     cdef transitMatrixSxIxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxIxUI()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":700
 *             self.thisptr = new transitMatrixSxIxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":701
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":700
 *             self.thisptr = new transitMatrixSxIxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":703
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":704
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 704, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 704, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":703
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":707
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 707, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 707, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 707, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 707, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":708
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 708, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 708, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 708, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 708, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":707
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":710
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 710, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 710, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 710, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 710, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  __pyx_t_13_p2pExtension_ulong __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":711
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 711, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_long(__pyx_v_id_); if (unlikely((__pyx_t_2 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 711, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 711, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 711, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":710
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":713
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 713, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 713, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 713, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 713, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 713, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned int>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":714
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 714, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 714, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 714, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 714, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 714, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":713
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":716
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 716, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 716, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 716, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 716, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned int> >  __pyx_t_1;
  std::vector<std::string>  __pyx_t_2;
  std::vector<unsigned long>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":717
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 717, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 717, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 717, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 717, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":716
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":719
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":720
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 720, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 720, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":719
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":722
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":723
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 723, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 723, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":722
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":725
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":726
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 726, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 726, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":725
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":728
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":729
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 729, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 729, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":728
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":731
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":732
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 732, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 732, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":731
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":734
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":735
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 735, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 735, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":734
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":737
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":738
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 738, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":737
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":740
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 740, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 740, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 740, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<unsigned long,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":741
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 741, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 741, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 741, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":740
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":743
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 743, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 743, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 743, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":744
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 744, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 744, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 744, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":743
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":746
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 746, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 746, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 746, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ulong __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":747
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_long(__pyx_v_dest_id); if (unlikely((__pyx_t_1 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(1, 747, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 747, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 747, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":746
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":749
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 749, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 749, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 749, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":750
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 750, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 750, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 750, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":749
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":752
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 752, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 752, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 752, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 752, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  __pyx_t_13_p2pExtension_uint __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":753
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 753, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 753, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 753, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 753, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":752
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":755
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":756
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 756, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 756, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":755
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":758
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 758, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 758, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 758, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":759
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 759, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 759, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 759, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":758
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":761
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":762
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 762, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_unsigned_long(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":761
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":764
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":765
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 765, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":764
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":767
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<unsigned long,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":768
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 768, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 768, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":767
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":770
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<std::string,std::vector<unsigned long> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":771
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/transitMatrix.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 771, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 771, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":770
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxIxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxIxUI.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":810
 *     cdef transitMatrixSxSxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxSxUS()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 810, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 810, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 810, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 810, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 810, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 810, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<string, string,unsigned short int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":811
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxSxUS()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":812
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxSxUS()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixSxSxUS(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<string, string,unsigned short int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 812, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":811
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxSxUS()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":814
 *             self.thisptr = new transitMatrixSxSxUS()
 *         else:
 *             self.thisptr = new transitMatrixSxSxUS(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<string, string,unsigned short int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 814, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":810
 *     cdef transitMatrixSxSxUS *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxSxUS()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":816
 *             self.thisptr = new transitMatrixSxSxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":817
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":816
 *             self.thisptr = new transitMatrixSxSxUS(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":819
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":820
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 820, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 820, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":819
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":823
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 823, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 823, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 823, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 823, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":824
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 824, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 824, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":823
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":826
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 826, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 826, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 826, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 826, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":827
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 827, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 827, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 827, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 827, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":826
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":829
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 829, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 829, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 829, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 829, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned short>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":830
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 830, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 830, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_short(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 830, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 830, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 830, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":829
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":832
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 832, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 832, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 832, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 832, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned short> >  __pyx_t_1;
  std::vector<std::string>  __pyx_t_2;
  std::vector<std::string>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":833
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 833, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 833, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 833, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 833, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":832
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":835
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":836
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 836, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 836, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":835
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":838
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":839
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 839, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 839, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":838
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":841
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":842
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 842, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 842, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":841
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":844
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":845
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 845, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 845, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":844
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":847
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":848
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 848, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 848, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":847
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":850
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":851
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 851, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 851, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":850
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":853
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":854
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 854, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":853
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":856
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 856, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 856, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 856, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":857
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 857, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 857, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 857, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":856
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":859
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 859, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 859, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 859, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned short> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":860
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 860, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 860, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 860, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":859
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":862
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 862, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 862, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 862, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":863
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 863, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 863, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 863, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":862
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":865
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 865, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 865, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 865, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":866
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 866, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 866, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 866, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":865
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":868
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 868, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 868, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 868, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 868, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  __pyx_t_13_p2pExtension_ushort __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":869
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 869, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 869, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 869, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 869, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_short(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":868
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":871
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":872
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 872, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 872, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_short(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":871
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":874
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 874, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 874, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 874, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_ushort __pyx_t_2;
  __pyx_t_13_p2pExtension_ushort __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":875
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 875, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 875, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 875, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_short(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":874
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":877
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":878
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 878, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":877
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":880
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":881
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 881, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":880
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":883
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<std::string,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":884
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 884, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 884, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":883
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":886
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_ushort __pyx_t_1;
  std::unordered_map<std::string,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":887
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "include/transitMatrix.h":
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_short(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 887, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 887, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":886
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUS_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUS.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":926
 *     cdef transitMatrixSxSxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxSxUI()
 */

/* Python wrapper */
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  bool __pyx_v_isCompressible;
  bool __pyx_v_isSymmetric;
  unsigned int __pyx_v_rows;
  unsigned int __pyx_v_columns;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_isCompressible,&__pyx_n_s_isSymmetric,&__pyx_n_s_rows,&__pyx_n_s_columns,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isCompressible);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_isSymmetric);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rows);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_columns);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 926, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_isCompressible = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_isCompressible == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 926, __pyx_L3_error)
    } else {
      __pyx_v_isCompressible = ((bool)0);
    }
    if (values[1]) {
      __pyx_v_isSymmetric = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_isSymmetric == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 926, __pyx_L3_error)
    } else {
      __pyx_v_isSymmetric = ((bool)0);
    }
    if (values[2]) {
      __pyx_v_rows = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_rows == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 926, __pyx_L3_error)
    } else {
      __pyx_v_rows = ((unsigned int)0);
    }
    if (values[3]) {
      __pyx_v_columns = __Pyx_PyInt_As_unsigned_int(values[3]); if (unlikely((__pyx_v_columns == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 926, __pyx_L3_error)
    } else {
      __pyx_v_columns = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 926, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI___cinit__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI___cinit__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, bool __pyx_v_isCompressible, bool __pyx_v_isSymmetric, unsigned int __pyx_v_rows, unsigned int __pyx_v_columns) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  transitMatrix<string, string,unsigned int> *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "_p2pExtension.pyx":927
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxSxUI()
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_rows == 0) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_columns == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "_p2pExtension.pyx":928
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxSxUI()             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new transitMatrixSxSxUI(isCompressible, isSymmetric, rows, columns)
 */
    try {
      __pyx_t_3 = new transitMatrix<string, string,unsigned int>();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 928, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "_p2pExtension.pyx":927
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):
 *         if rows == 0 and columns == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new transitMatrixSxSxUI()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "_p2pExtension.pyx":930
 *             self.thisptr = new transitMatrixSxSxUI()
 *         else:
 *             self.thisptr = new transitMatrixSxSxUI(isCompressible, isSymmetric, rows, columns)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    try {
      __pyx_t_3 = new transitMatrix<string, string,unsigned int>(__pyx_v_isCompressible, __pyx_v_isSymmetric, __pyx_v_rows, __pyx_v_columns);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 930, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "_p2pExtension.pyx":926
 *     cdef transitMatrixSxSxUI *thisptr
 * 
 *     def __cinit__(self, bool isCompressible=False, bool isSymmetric=False, unsigned int rows=0, unsigned int columns=0):             # <<<<<<<<<<<<<<
 *         if rows == 0 and columns == 0:
 *             self.thisptr = new transitMatrixSxSxUI()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":932
 *             self.thisptr = new transitMatrixSxSxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_2__dealloc__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_2__dealloc__(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "_p2pExtension.pyx":933
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def prepareGraphWithVertices(self, vertices):
 */
  delete __pyx_v_self->thisptr;

  /* "_p2pExtension.pyx":932
 *             self.thisptr = new transitMatrixSxSxUI(isCompressible, isSymmetric, rows, columns)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "_p2pExtension.pyx":935
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_5prepareGraphWithVertices(PyObject *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("prepareGraphWithVertices (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_4prepareGraphWithVertices(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_vertices));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_4prepareGraphWithVertices(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_vertices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("prepareGraphWithVertices", 0);

  /* "_p2pExtension.pyx":936
 * 
 *     def prepareGraphWithVertices(self, vertices):
 *         self.thisptr.prepareGraphWithVertices(vertices)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_vertices); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 936, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->prepareGraphWithVertices(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 936, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":935
 *         del self.thisptr
 * 
 *     def prepareGraphWithVertices(self, vertices):             # <<<<<<<<<<<<<<
 *         self.thisptr.prepareGraphWithVertices(vertices)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.prepareGraphWithVertices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":939
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_7addToUserSourceDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 939, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 939, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserSourceDataContainer") < 0)) __PYX_ERR(1, 939, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserSourceDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 939, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_6addToUserSourceDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_6addToUserSourceDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserSourceDataContainer", 0);

  /* "_p2pExtension.pyx":940
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 940, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 940, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 940, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserSourceDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 940, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":939
 * 
 * 
 *     def addToUserSourceDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addToUserSourceDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":942
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_9addToUserDestDataContainer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_networkNodeId = 0;
  PyObject *__pyx_v_id_ = 0;
  PyObject *__pyx_v_lastMileDistance = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToUserDestDataContainer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_networkNodeId,&__pyx_n_s_id,&__pyx_n_s_lastMileDistance,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_networkNodeId)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 1); __PYX_ERR(1, 942, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lastMileDistance)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, 2); __PYX_ERR(1, 942, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToUserDestDataContainer") < 0)) __PYX_ERR(1, 942, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_networkNodeId = values[0];
    __pyx_v_id_ = values[1];
    __pyx_v_lastMileDistance = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToUserDestDataContainer", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 942, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_8addToUserDestDataContainer(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_networkNodeId, __pyx_v_id_, __pyx_v_lastMileDistance);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_8addToUserDestDataContainer(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_networkNodeId, PyObject *__pyx_v_id_, PyObject *__pyx_v_lastMileDistance) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  unsigned int __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToUserDestDataContainer", 0);

  /* "_p2pExtension.pyx":943
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)             # <<<<<<<<<<<<<<
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 */
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_networkNodeId); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 943, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_id_); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 943, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_lastMileDistance); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 943, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToUserDestDataContainer(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 943, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":942
 *         self.thisptr.addToUserSourceDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addToUserDestDataContainer(self, networkNodeId, id_, lastMileDistance):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addToUserDestDataContainer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":945
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_11addEdgesToGraph(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_from_column = 0;
  PyObject *__pyx_v_to_column = 0;
  PyObject *__pyx_v_edge_weight_column = 0;
  PyObject *__pyx_v_is_bidirectional_column = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addEdgesToGraph (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_column,&__pyx_n_s_to_column,&__pyx_n_s_edge_weight_column,&__pyx_n_s_is_bidirectional_column,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_from_column)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_to_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 1); __PYX_ERR(1, 945, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_weight_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 2); __PYX_ERR(1, 945, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_is_bidirectional_column)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, 3); __PYX_ERR(1, 945, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addEdgesToGraph") < 0)) __PYX_ERR(1, 945, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_from_column = values[0];
    __pyx_v_to_column = values[1];
    __pyx_v_edge_weight_column = values[2];
    __pyx_v_is_bidirectional_column = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addEdgesToGraph", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 945, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_10addEdgesToGraph(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_from_column, __pyx_v_to_column, __pyx_v_edge_weight_column, __pyx_v_is_bidirectional_column);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_10addEdgesToGraph(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_from_column, PyObject *__pyx_v_to_column, PyObject *__pyx_v_edge_weight_column, PyObject *__pyx_v_is_bidirectional_column) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<unsigned long>  __pyx_t_1;
  std::vector<unsigned long>  __pyx_t_2;
  std::vector<unsigned int>  __pyx_t_3;
  std::vector<bool>  __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addEdgesToGraph", 0);

  /* "_p2pExtension.pyx":946
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)             # <<<<<<<<<<<<<<
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_from_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 946, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_unsigned_long(__pyx_v_to_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 946, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_edge_weight_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 946, __pyx_L1_error)
  __pyx_t_4 = __pyx_convert_vector_from_py_bool(__pyx_v_is_bidirectional_column); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 946, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addEdgesToGraph(__pyx_t_1, __pyx_t_2, __pyx_t_3, __pyx_t_4);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 946, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":945
 *         self.thisptr.addToUserDestDataContainer(networkNodeId, id_, lastMileDistance)
 * 
 *     def addEdgesToGraph(self, from_column, to_column, edge_weight_column, is_bidirectional_column):             # <<<<<<<<<<<<<<
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addEdgesToGraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":948
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_13setMockDataFrame(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dataset = 0;
  PyObject *__pyx_v_row_ids = 0;
  PyObject *__pyx_v_col_ids = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setMockDataFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dataset,&__pyx_n_s_row_ids,&__pyx_n_s_col_ids,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dataset)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_row_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 1); __PYX_ERR(1, 948, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_col_ids)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, 2); __PYX_ERR(1, 948, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setMockDataFrame") < 0)) __PYX_ERR(1, 948, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_dataset = values[0];
    __pyx_v_row_ids = values[1];
    __pyx_v_col_ids = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setMockDataFrame", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 948, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_12setMockDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_dataset, __pyx_v_row_ids, __pyx_v_col_ids);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_12setMockDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_dataset, PyObject *__pyx_v_row_ids, PyObject *__pyx_v_col_ids) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::vector<unsigned int> >  __pyx_t_1;
  std::vector<std::string>  __pyx_t_2;
  std::vector<std::string>  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setMockDataFrame", 0);

  /* "_p2pExtension.pyx":949
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)             # <<<<<<<<<<<<<<
 * 
 *     def compute(self, numThreads):
 */
  __pyx_t_1 = __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(__pyx_v_dataset); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 949, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_row_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 949, __pyx_L1_error)
  __pyx_t_3 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_v_col_ids); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 949, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->setMockDataFrame(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 949, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":948
 *         self.thisptr.addEdgesToGraph(from_column, to_column, edge_weight_column, is_bidirectional_column)
 * 
 *     def setMockDataFrame(self, dataset, row_ids, col_ids):             # <<<<<<<<<<<<<<
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.setMockDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":951
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_15compute(PyObject *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_14compute(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_numThreads));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_14compute(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_numThreads) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute", 0);

  /* "_p2pExtension.pyx":952
 * 
 *     def compute(self, numThreads):
 *         self.thisptr.compute(numThreads)             # <<<<<<<<<<<<<<
 * 
 *     def writeCSV(self, outfile):
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_numThreads); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 952, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->compute(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 952, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":951
 *         self.thisptr.setMockDataFrame(dataset, row_ids, col_ids)
 * 
 *     def compute(self, numThreads):             # <<<<<<<<<<<<<<
 *         self.thisptr.compute(numThreads)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.compute", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":954
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_17writeCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_16writeCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_16writeCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeCSV", 0);

  /* "_p2pExtension.pyx":955
 * 
 *     def writeCSV(self, outfile):
 *         self.thisptr.writeCSV(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def writeTMX(self, outfile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 955, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 955, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":954
 *         self.thisptr.compute(numThreads)
 * 
 *     def writeCSV(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeCSV(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.writeCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":957
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_19writeTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_18writeTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_outfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_18writeTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_outfile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeTMX", 0);

  /* "_p2pExtension.pyx":958
 * 
 *     def writeTMX(self, outfile):
 *         self.thisptr.writeTMX(outfile)             # <<<<<<<<<<<<<<
 * 
 *     def readTMX(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_outfile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 958, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->writeTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 958, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":957
 *         self.thisptr.writeCSV(outfile)
 * 
 *     def writeTMX(self, outfile):             # <<<<<<<<<<<<<<
 *         self.thisptr.writeTMX(outfile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.writeTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":960
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_21readTMX(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readTMX (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_20readTMX(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_20readTMX(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readTMX", 0);

  /* "_p2pExtension.pyx":961
 * 
 *     def readTMX(self, infile):
 *         self.thisptr.readTMX(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 961, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readTMX(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 961, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":960
 *         self.thisptr.writeTMX(outfile)
 * 
 *     def readTMX(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readTMX(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.readTMX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":963
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_23readCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_22readCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_22readCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readCSV", 0);

  /* "_p2pExtension.pyx":964
 * 
 *     def readCSV(self, infile):
 *         self.thisptr.readCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def readOTPCSV(self, infile):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 964, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 964, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":963
 *         self.thisptr.readTMX(infile)
 * 
 *     def readCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.readCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":966
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_25readOTPCSV(PyObject *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readOTPCSV (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_24readOTPCSV(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_infile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_24readOTPCSV(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_infile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readOTPCSV", 0);

  /* "_p2pExtension.pyx":967
 * 
 *     def readOTPCSV(self, infile):
 *         self.thisptr.readOTPCSV(infile)             # <<<<<<<<<<<<<<
 * 
 *     def printDataFrame(self):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_infile); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 967, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->readOTPCSV(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 967, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":966
 *         self.thisptr.readCSV(infile)
 * 
 *     def readOTPCSV(self, infile):             # <<<<<<<<<<<<<<
 *         self.thisptr.readOTPCSV(infile)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.readOTPCSV", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":969
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_27printDataFrame(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("printDataFrame (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_26printDataFrame(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_26printDataFrame(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("printDataFrame", 0);

  /* "_p2pExtension.pyx":970
 * 
 *     def printDataFrame(self):
 *         self.thisptr.printDataFrame()             # <<<<<<<<<<<<<<
 * 
 *     def getValuesBySource(self, source_id, sort):
 */
  try {
    __pyx_v_self->thisptr->printDataFrame();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 970, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":969
 *         self.thisptr.readOTPCSV(infile)
 * 
 *     def printDataFrame(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.printDataFrame()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.printDataFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":972
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_29getValuesBySource(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesBySource (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, 1); __PYX_ERR(1, 972, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesBySource") < 0)) __PYX_ERR(1, 972, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesBySource", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 972, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_28getValuesBySource(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_28getValuesBySource(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesBySource", 0);

  /* "_p2pExtension.pyx":973
 * 
 *     def getValuesBySource(self, source_id, sort):
 *         return self.thisptr.getValuesBySource(source_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def getValuesByDest(self, dest_id, sort):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 973, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 973, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesBySource(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 973, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":972
 *         self.thisptr.printDataFrame()
 * 
 *     def getValuesBySource(self, source_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getValuesBySource", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":975
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_31getValuesByDest(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_sort = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValuesByDest (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_sort,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sort)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, 1); __PYX_ERR(1, 975, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getValuesByDest") < 0)) __PYX_ERR(1, 975, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_sort = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getValuesByDest", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 975, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_30getValuesByDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_sort);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_30getValuesByDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_sort) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  bool __pyx_t_2;
  std::vector<std::pair<std::string,unsigned int> >  __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValuesByDest", 0);

  /* "_p2pExtension.pyx":976
 * 
 *     def getValuesByDest(self, dest_id, sort):
 *         return self.thisptr.getValuesByDest(dest_id, sort)             # <<<<<<<<<<<<<<
 * 
 *     def addToCategoryMap(self, dest_id, category):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 976, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_sort); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 976, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->getValuesByDest(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 976, __pyx_L1_error)
  }
  __pyx_t_4 = __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":975
 *         return self.thisptr.getValuesBySource(source_id, sort)
 * 
 *     def getValuesByDest(self, dest_id, sort):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getValuesByDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":978
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_33addToCategoryMap(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dest_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addToCategoryMap (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dest_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dest_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, 1); __PYX_ERR(1, 978, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "addToCategoryMap") < 0)) __PYX_ERR(1, 978, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_dest_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addToCategoryMap", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 978, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_32addToCategoryMap(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_dest_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_32addToCategoryMap(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_dest_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addToCategoryMap", 0);

  /* "_p2pExtension.pyx":979
 * 
 *     def addToCategoryMap(self, dest_id, category):
 *         self.thisptr.addToCategoryMap(dest_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 */
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_dest_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 979, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 979, __pyx_L1_error)
  try {
    __pyx_v_self->thisptr->addToCategoryMap(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 979, __pyx_L1_error)
  }

  /* "_p2pExtension.pyx":978
 *         return self.thisptr.getValuesByDest(dest_id, sort)
 * 
 *     def addToCategoryMap(self, dest_id, category):             # <<<<<<<<<<<<<<
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.addToCategoryMap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":981
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_35timeToNearestDestPerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, 1); __PYX_ERR(1, 981, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "timeToNearestDestPerCategory") < 0)) __PYX_ERR(1, 981, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("timeToNearestDestPerCategory", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 981, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_34timeToNearestDestPerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_34timeToNearestDestPerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDestPerCategory", 0);

  /* "_p2pExtension.pyx":982
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 982, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 982, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->timeToNearestDestPerCategory(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 982, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":981
 *         self.thisptr.addToCategoryMap(dest_id, category)
 * 
 *     def timeToNearestDestPerCategory(self, source_id, category):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.timeToNearestDestPerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":984
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_37countDestsInRangePerCategory(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_category = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_category,&__pyx_n_s_range,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_category)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 1); __PYX_ERR(1, 984, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, 2); __PYX_ERR(1, 984, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRangePerCategory") < 0)) __PYX_ERR(1, 984, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_category = values[1];
    __pyx_v_range = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRangePerCategory", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 984, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_36countDestsInRangePerCategory(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_category, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_36countDestsInRangePerCategory(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_category, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  std::string __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  __pyx_t_13_p2pExtension_uint __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRangePerCategory", 0);

  /* "_p2pExtension.pyx":985
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)             # <<<<<<<<<<<<<<
 * 
 *     def timeToNearestDest(self, source_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 985, __pyx_L1_error)
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_category); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 985, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_3 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 985, __pyx_L1_error)
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->countDestsInRangePerCategory(__pyx_t_1, __pyx_t_2, __pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 985, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":984
 *         return self.thisptr.timeToNearestDestPerCategory(source_id, category)
 * 
 *     def countDestsInRangePerCategory(self, source_id, category, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.countDestsInRangePerCategory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":987
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_39timeToNearestDest(PyObject *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeToNearestDest (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_38timeToNearestDest(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_source_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_38timeToNearestDest(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("timeToNearestDest", 0);

  /* "_p2pExtension.pyx":988
 * 
 *     def timeToNearestDest(self, source_id):
 *         return self.thisptr.timeToNearestDest(source_id)             # <<<<<<<<<<<<<<
 * 
 *     def countDestsInRange(self, source_id, range):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 988, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->timeToNearestDest(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 988, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":987
 *         return self.thisptr.countDestsInRangePerCategory(source_id, category, range)
 * 
 *     def timeToNearestDest(self, source_id):             # <<<<<<<<<<<<<<
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.timeToNearestDest", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":990
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_41countDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source_id = 0;
  PyObject *__pyx_v_range = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("countDestsInRange (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source_id,&__pyx_n_s_range,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_range)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, 1); __PYX_ERR(1, 990, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "countDestsInRange") < 0)) __PYX_ERR(1, 990, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_source_id = values[0];
    __pyx_v_range = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("countDestsInRange", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 990, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_40countDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), __pyx_v_source_id, __pyx_v_range);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_40countDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_source_id, PyObject *__pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  __pyx_t_13_p2pExtension_uint __pyx_t_2;
  __pyx_t_13_p2pExtension_uint __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("countDestsInRange", 0);

  /* "_p2pExtension.pyx":991
 * 
 *     def countDestsInRange(self, source_id, range):
 *         return self.thisptr.countDestsInRange(source_id, range)             # <<<<<<<<<<<<<<
 * 
 *     def getColIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_from_py_std__in_string(__pyx_v_source_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 991, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range); if (unlikely((__pyx_t_2 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 991, __pyx_L1_error)
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->countDestsInRange(__pyx_t_1, __pyx_t_2);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 991, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":990
 *         return self.thisptr.timeToNearestDest(source_id)
 * 
 *     def countDestsInRange(self, source_id, range):             # <<<<<<<<<<<<<<
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.countDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":993
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_43getColIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getColIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_42getColIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_42getColIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getColIds", 0);

  /* "_p2pExtension.pyx":994
 * 
 *     def getColIds(self):
 *         return self.thisptr.getColIds()             # <<<<<<<<<<<<<<
 * 
 *     def getRowIds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getColIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 994, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":993
 *         return self.thisptr.countDestsInRange(source_id, range)
 * 
 *     def getColIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getColIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getColIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":996
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_45getRowIds(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRowIds (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_44getRowIds(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_44getRowIds(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<std::string>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRowIds", 0);

  /* "_p2pExtension.pyx":997
 * 
 *     def getRowIds(self):
 *         return self.thisptr.getRowIds()             # <<<<<<<<<<<<<<
 * 
 *     def getSourcesInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getRowIds();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 997, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":996
 *         return self.thisptr.getColIds()
 * 
 *     def getRowIds(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getRowIds()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getRowIds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":999
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_47getSourcesInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSourcesInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_46getSourcesInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_46getSourcesInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<std::string,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSourcesInRange", 0);

  /* "_p2pExtension.pyx":1000
 * 
 *     def getSourcesInRange(self, range_):
 *         return self.thisptr.getSourcesInRange(range_)             # <<<<<<<<<<<<<<
 * 
 *     def getDestsInRange(self, range_):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1000, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getSourcesInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1000, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":999
 *         return self.thisptr.getRowIds()
 * 
 *     def getSourcesInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getSourcesInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "_p2pExtension.pyx":1002
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_49getDestsInRange(PyObject *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDestsInRange (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_48getDestsInRange(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v_range_));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_48getDestsInRange(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, PyObject *__pyx_v_range_) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_13_p2pExtension_uint __pyx_t_1;
  std::unordered_map<std::string,std::vector<std::string> >  __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDestsInRange", 0);

  /* "_p2pExtension.pyx":1003
 * 
 *     def getDestsInRange(self, range_):
 *         return self.thisptr.getDestsInRange(range_)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_As_unsigned_int(__pyx_v_range_); if (unlikely((__pyx_t_1 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1003, __pyx_L1_error)
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getDestsInRange(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1003, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "_p2pExtension.pyx":1002
 *         return self.thisptr.getSourcesInRange(range_)
 * 
 *     def getDestsInRange(self, range_):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getDestsInRange(range_)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.getDestsInRange", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_51__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_50__reduce_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_50__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_53__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_52__setstate_cython__(((struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_13_p2pExtension_21pyTransitMatrixSxSxUI_52__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_p2pExtension.pyTransitMatrixSxSxUI.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_unsigned_long__and_unsigned_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_unsigned_long__and_unsigned_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

static std::pair<unsigned long,unsigned long>  __pyx_convert_pair_from_py_unsigned_long__and_unsigned_long(PyObject *__pyx_v_o) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  std::pair<unsigned long,unsigned long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  unsigned long __pyx_t_5;
  unsigned long __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_from_py_unsigned_long__and_unsigned_long", 0);

  /* "pair.from_py":146
 * @cname("__pyx_convert_pair_from_py_unsigned_long__and_unsigned_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_unsigned_long__and_unsigned_long(object o) except *:
 *     x, y = o             # <<<<<<<<<<<<<<
 *     return pair[X,Y](<X>x, <Y>y)
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_o))) || (PyList_CheckExact(__pyx_v_o))) {
    PyObject* sequence = __pyx_v_o;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 146, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 146, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_x = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_y = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "pair.from_py":147
 * cdef pair[X,Y] __pyx_convert_pair_from_py_unsigned_long__and_unsigned_long(object o) except *:
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_x); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyInt_As_unsigned_long(__pyx_v_y); if (unlikely((__pyx_t_6 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)
  __pyx_r = std::pair<unsigned long,unsigned long> (((unsigned long)__pyx_t_5), ((unsigned long)__pyx_t_6));
  goto __pyx_L0;

  /* "pair.from_py":145
 * 
 * @cname("__pyx_convert_pair_from_py_unsigned_long__and_unsigned_long")
 * cdef pair[X,Y] __pyx_convert_pair_from_py_unsigned_long__and_unsigned_long(object o) except *:             # <<<<<<<<<<<<<<
 *     x, y = o
 *     return pair[X,Y](<X>x, <Y>y)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.from_py.__pyx_convert_pair_from_py_unsigned_long__and_unsigned_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::pair<unsigned long,unsigned long> >  __pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___(PyObject *__pyx_v_o) {
  std::vector<std::pair<unsigned long,unsigned long> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::pair<unsigned long,unsigned long> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::pair<unsigned long,unsigned long>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_pair_from_py_unsigned_long__and_unsigned_long(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::pair<unsigned long,unsigned long> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<unsigned long>  __pyx_convert_vector_from_py_unsigned_long(PyObject *__pyx_v_o) {
  std::vector<unsigned long>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<unsigned long>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  unsigned long __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_unsigned_long", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_long(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_long(__pyx_v_item); if (unlikely((__pyx_t_5 == (unsigned long)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((unsigned long)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_long(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_unsigned_long")
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_long(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_unsigned_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "set.to_py":129
 * 
 * @cname("__pyx_convert_unordered_set_to_py_unsigned_long")
 * cdef object __pyx_convert_unordered_set_to_py_unsigned_long(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

static PyObject *__pyx_convert_unordered_set_to_py_unsigned_long(std::unordered_set<unsigned long>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_set<unsigned long> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_set_to_py_unsigned_long", 0);

  /* "set.to_py":130
 * @cname("__pyx_convert_unordered_set_to_py_unsigned_long")
 * cdef object __pyx_convert_unordered_set_to_py_unsigned_long(const cpp_set[X]& s):
 *     o = set()             # <<<<<<<<<<<<<<
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "set.to_py":131
 * cdef object __pyx_convert_unordered_set_to_py_unsigned_long(const cpp_set[X]& s):
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "set.to_py":132
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "set.to_py":133
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_long((*__pyx_v_iter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySet_Add(__pyx_v_o, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "set.to_py":134
 *     while iter != s.end():
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "set.to_py":135
 *         o.add(cython.operator.dereference(iter))
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "set.to_py":129
 * 
 * @cname("__pyx_convert_unordered_set_to_py_unsigned_long")
 * cdef object __pyx_convert_unordered_set_to_py_unsigned_long(const cpp_set[X]& s):             # <<<<<<<<<<<<<<
 *     o = set()
 *     cdef cpp_set[X].const_iterator iter = s.begin()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("set.to_py.__pyx_convert_unordered_set_to_py_unsigned_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_unsigned_short")
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_short(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<unsigned short>  __pyx_convert_vector_from_py_unsigned_short(PyObject *__pyx_v_o) {
  std::vector<unsigned short>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<unsigned short>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  unsigned short __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_unsigned_short", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_short(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_short(__pyx_v_item); if (unlikely((__pyx_t_5 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((unsigned short)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_short(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_unsigned_short")
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_short(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_unsigned_short", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *__pyx_v_o) {
  std::vector<bool>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<bool>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_bool", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_item); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((bool)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_bool")
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<unsigned short> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<unsigned short> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<unsigned short> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<unsigned short>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_unsigned_short(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<unsigned short> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_short_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_unsigned_long____unsigned_short")
 * cdef object __pyx_convert_pair_to_py_unsigned_long____unsigned_short(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_unsigned_long____unsigned_short(std::pair<unsigned long,unsigned short>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_unsigned_long____unsigned_short", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_unsigned_long____unsigned_short")
 * cdef object __pyx_convert_pair_to_py_unsigned_long____unsigned_short(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_short(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_unsigned_long____unsigned_short")
 * cdef object __pyx_convert_pair_to_py_unsigned_long____unsigned_short(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_unsigned_long____unsigned_short", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(const std::vector<std::pair<unsigned long,unsigned short> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_unsigned_long____unsigned_short((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_short_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_unsigned_long(const std::vector<unsigned long>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_unsigned_long", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_unsigned_long")
 * cdef object __pyx_convert_vector_to_py_unsigned_long(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_unsigned_long((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_unsigned_long")
 * cdef object __pyx_convert_vector_to_py_unsigned_long(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_unsigned_long", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(std::unordered_map<unsigned long,std::vector<unsigned long> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<unsigned long,std::vector<unsigned long> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<unsigned long,std::vector<unsigned long> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_unsigned_long(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_unsigned_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_unsigned_int")
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<unsigned int>  __pyx_convert_vector_from_py_unsigned_int(PyObject *__pyx_v_o) {
  std::vector<unsigned int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<unsigned int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_unsigned_int", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_unsigned_int(__pyx_v_item); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((unsigned int)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_unsigned_int")
 * cdef vector[X] __pyx_convert_vector_from_py_unsigned_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<std::vector<unsigned int> >  __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(PyObject *__pyx_v_o) {
  std::vector<std::vector<unsigned int> >  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::vector<unsigned int> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::vector<unsigned int>  __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_vector_from_py_unsigned_int(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::vector<unsigned int> )__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_vector_3c_unsigned_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_unsigned_long____unsigned_int")
 * cdef object __pyx_convert_pair_to_py_unsigned_long____unsigned_int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_unsigned_long____unsigned_int(std::pair<unsigned long,unsigned int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_unsigned_long____unsigned_int", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_unsigned_long____unsigned_int")
 * cdef object __pyx_convert_pair_to_py_unsigned_long____unsigned_int(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_long(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_unsigned_long____unsigned_int")
 * cdef object __pyx_convert_pair_to_py_unsigned_long____unsigned_int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_unsigned_long____unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(const std::vector<std::pair<unsigned long,unsigned int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_unsigned_long____unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_unsigned_long_2c_unsigned_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((std::string)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short(std::pair<std::string,unsigned short>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_short(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(const std::vector<std::pair<std::string,unsigned short> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_short((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_short_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_PyBytes_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(std::unordered_map<std::string,std::vector<unsigned long> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<std::string,std::vector<unsigned long> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<std::string,std::vector<unsigned long> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_unsigned_long(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_unsigned_long_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<unsigned long,std::vector<std::string> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<unsigned long,std::vector<std::string> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<unsigned long,std::vector<std::string> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_long(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_unsigned_long____std_3a__3a_vector_3c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

static PyObject *__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int(std::pair<std::string,unsigned int>  const &__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int", 0);

  /* "pair.to_py":159
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int(const pair[X,Y]& p):
 *     return p.first, p.second             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_p.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_p.second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pair.to_py":158
 * 
 * @cname("__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int")
 * cdef object __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int(const pair[X,Y]& p):             # <<<<<<<<<<<<<<
 *     return p.first, p.second
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pair.to_py.__pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(const std::vector<std::pair<std::string,unsigned int> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_pair_to_py_std_3a__3a_string____unsigned_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_pair_3c_std_3a__3a_string_2c_unsigned_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(std::unordered_map<std::string,std::vector<std::string> >  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::unordered_map<std::string,std::vector<std::string> > ::value_type const *__pyx_v_key_value;
  std::unordered_map<std::string,std::vector<std::string> > ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___", 0);

  /* "map.to_py":202
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":204
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":205
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":206
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":207
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(0, 207, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":208
 *         key_value = &cython.operator.dereference(iter)
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 * 
 */
    (void)((++__pyx_v_iter));
  }

  /* "map.to_py":209
 *         o[key_value.first] = key_value.second
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_13_p2pExtension_pyNetworkUtility(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_16pyNetworkUtility_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyNetworkUtility(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_16pyNetworkUtility_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyNetworkUtility[] = {
  {"getConnectedNetworkNodes", (PyCFunction)__pyx_pw_13_p2pExtension_16pyNetworkUtility_5getConnectedNetworkNodes, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_16pyNetworkUtility_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_16pyNetworkUtility_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyNetworkUtility = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyNetworkUtility", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyNetworkUtility), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyNetworkUtility, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyNetworkUtility, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyNetworkUtility, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTMXTypeReader(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_15pyTMXTypeReader_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTMXTypeReader(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_15pyTMXTypeReader_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTMXTypeReader[] = {
  {"get_tmx_version", (PyCFunction)__pyx_pw_13_p2pExtension_15pyTMXTypeReader_5get_tmx_version, METH_NOARGS, 0},
  {"get_row_type_enum", (PyCFunction)__pyx_pw_13_p2pExtension_15pyTMXTypeReader_7get_row_type_enum, METH_NOARGS, 0},
  {"get_col_type_enum", (PyCFunction)__pyx_pw_13_p2pExtension_15pyTMXTypeReader_9get_col_type_enum, METH_NOARGS, 0},
  {"get_value_type_enum", (PyCFunction)__pyx_pw_13_p2pExtension_15pyTMXTypeReader_11get_value_type_enum, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_15pyTMXTypeReader_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_15pyTMXTypeReader_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTMXTypeReader = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTMXTypeReader", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTMXTypeReader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTMXTypeReader, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTMXTypeReader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTMXTypeReader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxIxUS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxIxUS(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixIxIxUS[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUS_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixIxIxUS", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxIxUS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixIxIxUS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixIxIxUS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxIxUI(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxIxUI(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixIxIxUI[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxIxUI_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixIxIxUI", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxIxUI), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxIxUI, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixIxIxUI, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixIxIxUI, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxSxUS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxSxUS(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixIxSxUS[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUS_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixIxSxUS", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxSxUS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixIxSxUS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixIxSxUS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixIxSxUI(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxSxUI(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixIxSxUI[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixIxSxUI_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixIxSxUI", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixIxSxUI), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixIxSxUI, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixIxSxUI, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixIxSxUI, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxIxUS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxIxUS(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixSxIxUS[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUS_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixSxIxUS", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxIxUS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixSxIxUS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixSxIxUS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxIxUI(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxIxUI(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixSxIxUI[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxIxUI_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixSxIxUI", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxIxUI), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxIxUI, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixSxIxUI, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixSxIxUI, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxSxUS(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxSxUS(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixSxSxUS[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUS_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixSxSxUS", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxSxUS, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixSxSxUS, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixSxSxUS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyObject *__pyx_tp_new_13_p2pExtension_pyTransitMatrixSxSxUI(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxSxUI(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_13_p2pExtension_pyTransitMatrixSxSxUI[] = {
  {"prepareGraphWithVertices", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_5prepareGraphWithVertices, METH_O, 0},
  {"addToUserSourceDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_7addToUserSourceDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToUserDestDataContainer", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_9addToUserDestDataContainer, METH_VARARGS|METH_KEYWORDS, 0},
  {"addEdgesToGraph", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_11addEdgesToGraph, METH_VARARGS|METH_KEYWORDS, 0},
  {"setMockDataFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_13setMockDataFrame, METH_VARARGS|METH_KEYWORDS, 0},
  {"compute", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_15compute, METH_O, 0},
  {"writeCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_17writeCSV, METH_O, 0},
  {"writeTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_19writeTMX, METH_O, 0},
  {"readTMX", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_21readTMX, METH_O, 0},
  {"readCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_23readCSV, METH_O, 0},
  {"readOTPCSV", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_25readOTPCSV, METH_O, 0},
  {"printDataFrame", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_27printDataFrame, METH_NOARGS, 0},
  {"getValuesBySource", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_29getValuesBySource, METH_VARARGS|METH_KEYWORDS, 0},
  {"getValuesByDest", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_31getValuesByDest, METH_VARARGS|METH_KEYWORDS, 0},
  {"addToCategoryMap", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_33addToCategoryMap, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDestPerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_35timeToNearestDestPerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"countDestsInRangePerCategory", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_37countDestsInRangePerCategory, METH_VARARGS|METH_KEYWORDS, 0},
  {"timeToNearestDest", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_39timeToNearestDest, METH_O, 0},
  {"countDestsInRange", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_41countDestsInRange, METH_VARARGS|METH_KEYWORDS, 0},
  {"getColIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_43getColIds, METH_NOARGS, 0},
  {"getRowIds", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_45getRowIds, METH_NOARGS, 0},
  {"getSourcesInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_47getSourcesInRange, METH_O, 0},
  {"getDestsInRange", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_49getDestsInRange, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_51__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_13_p2pExtension_21pyTransitMatrixSxSxUI_53__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI = {
  PyVarObject_HEAD_INIT(0, 0)
  "_p2pExtension.pyTransitMatrixSxSxUI", /*tp_name*/
  sizeof(struct __pyx_obj_13_p2pExtension_pyTransitMatrixSxSxUI), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_13_p2pExtension_pyTransitMatrixSxSxUI, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_13_p2pExtension_pyTransitMatrixSxSxUI, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_13_p2pExtension_pyTransitMatrixSxSxUI, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030B00A2
  0, /*tp_inline_values_offset*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__p2pExtension(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__p2pExtension},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_p2pExtension",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_category, __pyx_k_category, sizeof(__pyx_k_category), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_col_ids, __pyx_k_col_ids, sizeof(__pyx_k_col_ids), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_dataset, __pyx_k_dataset, sizeof(__pyx_k_dataset), 0, 0, 1, 1},
  {&__pyx_n_s_dest_id, __pyx_k_dest_id, sizeof(__pyx_k_dest_id), 0, 0, 1, 1},
  {&__pyx_n_s_edge_weight_column, __pyx_k_edge_weight_column, sizeof(__pyx_k_edge_weight_column), 0, 0, 1, 1},
  {&__pyx_n_s_edges, __pyx_k_edges, sizeof(__pyx_k_edges), 0, 0, 1, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_from_column, __pyx_k_from_column, sizeof(__pyx_k_from_column), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_isCompressible, __pyx_k_isCompressible, sizeof(__pyx_k_isCompressible), 0, 0, 1, 1},
  {&__pyx_n_s_isSymmetric, __pyx_k_isSymmetric, sizeof(__pyx_k_isSymmetric), 0, 0, 1, 1},
  {&__pyx_n_s_is_bidirectional_column, __pyx_k_is_bidirectional_column, sizeof(__pyx_k_is_bidirectional_column), 0, 0, 1, 1},
  {&__pyx_n_s_lastMileDistance, __pyx_k_lastMileDistance, sizeof(__pyx_k_lastMileDistance), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_networkNodeId, __pyx_k_networkNodeId, sizeof(__pyx_k_networkNodeId), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_nodes, __pyx_k_nodes, sizeof(__pyx_k_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_pyNetworkUtility, __pyx_k_pyNetworkUtility, sizeof(__pyx_k_pyNetworkUtility), 0, 0, 1, 1},
  {&__pyx_n_s_pyTMXTypeReader, __pyx_k_pyTMXTypeReader, sizeof(__pyx_k_pyTMXTypeReader), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixIxIxUI, __pyx_k_pyTransitMatrixIxIxUI, sizeof(__pyx_k_pyTransitMatrixIxIxUI), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixIxIxUS, __pyx_k_pyTransitMatrixIxIxUS, sizeof(__pyx_k_pyTransitMatrixIxIxUS), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixIxSxUI, __pyx_k_pyTransitMatrixIxSxUI, sizeof(__pyx_k_pyTransitMatrixIxSxUI), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixIxSxUS, __pyx_k_pyTransitMatrixIxSxUS, sizeof(__pyx_k_pyTransitMatrixIxSxUS), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixSxIxUI, __pyx_k_pyTransitMatrixSxIxUI, sizeof(__pyx_k_pyTransitMatrixSxIxUI), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixSxIxUS, __pyx_k_pyTransitMatrixSxIxUS, sizeof(__pyx_k_pyTransitMatrixSxIxUS), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixSxSxUI, __pyx_k_pyTransitMatrixSxSxUI, sizeof(__pyx_k_pyTransitMatrixSxSxUI), 0, 0, 1, 1},
  {&__pyx_n_s_pyTransitMatrixSxSxUS, __pyx_k_pyTransitMatrixSxSxUS, sizeof(__pyx_k_pyTransitMatrixSxSxUS), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_row_ids, __pyx_k_row_ids, sizeof(__pyx_k_row_ids), 0, 0, 1, 1},
  {&__pyx_n_s_rows, __pyx_k_rows, sizeof(__pyx_k_rows), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_source_id, __pyx_k_source_id, sizeof(__pyx_k_source_id), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_column, __pyx_k_to_column, sizeof(__pyx_k_to_column), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 61, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyNetworkUtility) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyNetworkUtility.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyNetworkUtility.tp_dictoffset && __pyx_type_13_p2pExtension_pyNetworkUtility.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyNetworkUtility.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyNetworkUtility, (PyObject *)&__pyx_type_13_p2pExtension_pyNetworkUtility) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyNetworkUtility) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyNetworkUtility = &__pyx_type_13_p2pExtension_pyNetworkUtility;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTMXTypeReader) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTMXTypeReader.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTMXTypeReader.tp_dictoffset && __pyx_type_13_p2pExtension_pyTMXTypeReader.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTMXTypeReader.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTMXTypeReader, (PyObject *)&__pyx_type_13_p2pExtension_pyTMXTypeReader) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTMXTypeReader) < 0) __PYX_ERR(1, 43, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTMXTypeReader = &__pyx_type_13_p2pExtension_pyTMXTypeReader;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS) < 0) __PYX_ERR(1, 111, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixIxIxUS, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS) < 0) __PYX_ERR(1, 111, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS) < 0) __PYX_ERR(1, 111, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixIxIxUS = &__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUS;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI) < 0) __PYX_ERR(1, 227, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixIxIxUI, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI) < 0) __PYX_ERR(1, 227, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI) < 0) __PYX_ERR(1, 227, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixIxIxUI = &__pyx_type_13_p2pExtension_pyTransitMatrixIxIxUI;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS) < 0) __PYX_ERR(1, 343, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixIxSxUS, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS) < 0) __PYX_ERR(1, 343, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS) < 0) __PYX_ERR(1, 343, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixIxSxUS = &__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUS;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI) < 0) __PYX_ERR(1, 459, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixIxSxUI, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI) < 0) __PYX_ERR(1, 459, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI) < 0) __PYX_ERR(1, 459, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixIxSxUI = &__pyx_type_13_p2pExtension_pyTransitMatrixIxSxUI;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS) < 0) __PYX_ERR(1, 575, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixSxIxUS, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS) < 0) __PYX_ERR(1, 575, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS) < 0) __PYX_ERR(1, 575, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixSxIxUS = &__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUS;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI) < 0) __PYX_ERR(1, 691, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixSxIxUI, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI) < 0) __PYX_ERR(1, 691, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI) < 0) __PYX_ERR(1, 691, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixSxIxUI = &__pyx_type_13_p2pExtension_pyTransitMatrixSxIxUI;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS) < 0) __PYX_ERR(1, 807, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixSxSxUS, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS) < 0) __PYX_ERR(1, 807, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS) < 0) __PYX_ERR(1, 807, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixSxSxUS = &__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUS;
  if (PyType_Ready(&__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI) < 0) __PYX_ERR(1, 923, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI.tp_dictoffset && __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_pyTransitMatrixSxSxUI, (PyObject *)&__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI) < 0) __PYX_ERR(1, 923, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI) < 0) __PYX_ERR(1, 923, __pyx_L1_error)
  __pyx_ptype_13_p2pExtension_pyTransitMatrixSxSxUI = &__pyx_type_13_p2pExtension_pyTransitMatrixSxSxUI;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_p2pExtension(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_p2pExtension(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__p2pExtension(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__p2pExtension(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__p2pExtension(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_p2pExtension' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__p2pExtension(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_p2pExtension", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main__p2pExtension) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "_p2pExtension")) {
      if (unlikely(PyDict_SetItemString(modules, "_p2pExtension", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "_p2pExtension.pyx":1
 * # WARNING: This file is automatically generated.             # <<<<<<<<<<<<<<
 * # Update pyx_src/static.pyx and pyx_src/dynamic to change.
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "map.to_py":201
 * 
 * @cname("__pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___")
 * cdef object __pyx_convert_unordered_map_to_py_std_3a__3a_string____std_3a__3a_vector_3c_std_3a__3a_string_3e___(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init _p2pExtension", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _p2pExtension");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 2 * PyLong_SHIFT) {
                            return (unsigned long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 3 * PyLong_SHIFT) {
                            return (unsigned long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) >= 4 * PyLong_SHIFT) {
                            return (unsigned long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned long) ((((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) (((unsigned long)-1)*(((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned long) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned long) ((((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned long neg_one = (unsigned long) -1, const_zero = (unsigned long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned short) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned short, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) >= 2 * PyLong_SHIFT) {
                            return (unsigned short) (((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) >= 3 * PyLong_SHIFT) {
                            return (unsigned short) (((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) >= 4 * PyLong_SHIFT) {
                            return (unsigned short) (((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned short) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned short, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned short,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned short) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned short) (((unsigned short)-1)*(((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned short) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned short) ((((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned short) (((unsigned short)-1)*(((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned short) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned short) ((((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned short) (((unsigned short)-1)*(((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned short) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned short) ((((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned short) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned short) -1;
        }
    } else {
        unsigned short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned short) -1;
        val = __Pyx_PyInt_As_unsigned_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned short");
    return (unsigned short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned short");
    return (unsigned short) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_short(unsigned short value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned short) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned short),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
